#include<stdio.h>
#include<iostream>
#include<queue.h>
using namespace std;
typedef struct BST_node
 {
 	int data;
 	struct BST_node* left;
 	struct BST_node* right;
 }BST_node;
 
class TREE
{
	public:
	BST_node* root;
	    
	BST_node* getBST_node()
 {
 	BST_node* ptr = new BST_node();
 	printf("enter data\n");
 	scanf("%d",&ptr->data);
 	ptr->left = NULL;
 	ptr->right= NULL;
 	return ptr;
 }
 
 void create_tree()
 {
 	BST_node *temp1, *temp2;
  	int i, n;
  	printf("enter no of BST_nodes\n");
  	scanf("%d", &n);
  	root = getBST_node();
	for(i = 1; i<n; i++)
	{
		temp1 = root;
		temp2 = getBST_node();
		while(1)
		{
			if(temp2->data <= temp1->data)
			{
				if(temp1->left== NULL)
				{
					temp1->left = temp2;
					break; 
				}
				else
				  temp1 = temp1->left;
			}
			else
			{
				if(temp1->right== NULL)
				{
					temp1->right = temp2;
					break; 
				}
				else
				  temp1 = temp1->right;
			}
		}
	}
 }
 
 void inorder_display(BST_node* root)
 {
 	if(root == NULL)
 	  return;
    inorder_display(root->left);
    printf("%d\n", root->data);
    inorder_display(root->right); 
 }
 
 void preorder_display(BST_node* root)
 {
 	if(root == NULL)
 	  return;
 	printf("%d\n", root->data);  
 	preorder_display(root->left);
	preorder_display(root->right); 
 }
 
 void postorder_display(BST_node* root)
 {
 	if(root == NULL)
 	  return;
    postorder_display(root->left);
    postorder_display(root->right);
    printf("%d\n", root->data);
 }
 
 int count(BST_node *root)
 {
 	if(root == NULL)
 	  return 0;
 	return (1 + count(root->left) + count(root->right));	  
 }
 
 int sum(BST_node* root)
 {
 	if(root == NULL)
 	  return 0;
    return (root->data + sum(root->left) + sum(root->right)); 
 }
 
 int height(BST_node* root)
 {
 	if(root == NULL)
 	  return 0;
 	else
 	{
		if(height(root->left) > height(root->right))
		  return 1 + height(root->left); 	
		else
		  return 1+ height(root->right);  
    }  
 }
 void level_traversal()
 {
 	if(root == NULL)
 	{
 		printf("tree is emptyy\n");
	 	return;	
    }
    BST_node* x;
    queue <BST_node*> q;
    q.push(root);
    while(!q.empty())
    {
	    	x = q.front();
    		printf("%d ", x->data);
    		q.pop();
	    cout<<endl;
    	if(x->left!=NULL)
    	  q.push(x->left);
    	if(x->right!=NULL)
		  q.push(x->right);  
    }	 	
 }
};
 
 main()
 {
 	TREE T;
  	T.create_tree();
	printf("inorder display\n");	
	T.inorder_display(T.root);
	printf("preorder display\n");
	T.preorder_display(T.root);
	printf("postorder display\n");
	T.postorder_display(T.root);
	printf("level order display\n");
	T.level_traversal();
	printf("\ntotal BST_nodes : %d\n", T.count(T.root));
	printf("sum of BST_nodes is: %d\n", T.sum(T.root));
	printf("Height of tree is: %d\n", T.height(T.root));
 }
